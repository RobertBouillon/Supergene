//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace System.Diagnostics.UnitTesting {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("UnitTestData")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class UnitTestData : System.Data.DataSet {
        
        private ActionsDataTable tableActions;
        
        private DependenciesDataTable tableDependencies;
        
        private System.Data.DataRelation relationChildIDFK;
        
        private System.Data.DataRelation relationParentIDFK;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnitTestData() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected UnitTestData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Actions"] != null)) {
                    base.Tables.Add(new ActionsDataTable(ds.Tables["Actions"]));
                }
                if ((ds.Tables["Dependencies"] != null)) {
                    base.Tables.Add(new DependenciesDataTable(ds.Tables["Dependencies"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ActionsDataTable Actions {
            get {
                return this.tableActions;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DependenciesDataTable Dependencies {
            get {
                return this.tableDependencies;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            UnitTestData cln = ((UnitTestData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Actions"] != null)) {
                    base.Tables.Add(new ActionsDataTable(ds.Tables["Actions"]));
                }
                if ((ds.Tables["Dependencies"] != null)) {
                    base.Tables.Add(new DependenciesDataTable(ds.Tables["Dependencies"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableActions = ((ActionsDataTable)(base.Tables["Actions"]));
            if ((initTable == true)) {
                if ((this.tableActions != null)) {
                    this.tableActions.InitVars();
                }
            }
            this.tableDependencies = ((DependenciesDataTable)(base.Tables["Dependencies"]));
            if ((initTable == true)) {
                if ((this.tableDependencies != null)) {
                    this.tableDependencies.InitVars();
                }
            }
            this.relationChildIDFK = this.Relations["ChildIDFK"];
            this.relationParentIDFK = this.Relations["ParentIDFK"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "UnitTestData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/UnitTestData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableActions = new ActionsDataTable();
            base.Tables.Add(this.tableActions);
            this.tableDependencies = new DependenciesDataTable();
            base.Tables.Add(this.tableDependencies);
            this.relationChildIDFK = new System.Data.DataRelation("ChildIDFK", new System.Data.DataColumn[] {
                        this.tableActions.IDColumn}, new System.Data.DataColumn[] {
                        this.tableDependencies.ParentIDColumn}, false);
            this.Relations.Add(this.relationChildIDFK);
            this.relationParentIDFK = new System.Data.DataRelation("ParentIDFK", new System.Data.DataColumn[] {
                        this.tableActions.IDColumn}, new System.Data.DataColumn[] {
                        this.tableDependencies.ChildIDColumn}, false);
            this.Relations.Add(this.relationParentIDFK);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeActions() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDependencies() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            UnitTestData ds = new UnitTestData();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ActionsRowChangeEventHandler(object sender, ActionsRowChangeEvent e);
        
        public delegate void DependenciesRowChangeEventHandler(object sender, DependenciesRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ActionsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnFullName;
            
            private System.Data.DataColumn columnCreateImage;
            
            private System.Data.DataColumn columnTestImage;
            
            private System.Data.DataColumn columnTestStaticImage;
            
            private System.Data.DataColumn columnDestroyImage;
            
            private System.Data.DataColumn columnCreateException;
            
            private System.Data.DataColumn columnTestException;
            
            private System.Data.DataColumn columnTestStaticException;
            
            private System.Data.DataColumn columnDestroyException;
            
            private System.Data.DataColumn columnDependencies;
            
            private System.Data.DataColumn columnEnableTest;
            
            private System.Data.DataColumn columnTargetType;
            
            private System.Data.DataColumn columnCanCreate;
            
            private System.Data.DataColumn columnCanTest;
            
            private System.Data.DataColumn columnCanTestStatic;
            
            private System.Data.DataColumn columnCanDestroy;
            
            private System.Data.DataColumn columnActiveInstance;
            
            private System.Data.DataColumn columnCreateMethod;
            
            private System.Data.DataColumn columnTestMethod;
            
            private System.Data.DataColumn columnTestStaticMethod;
            
            private System.Data.DataColumn columnDestroyMethod;
            
            private System.Data.DataColumn columnID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionsDataTable() {
                this.TableName = "Actions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActionsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ActionsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CreateImageColumn {
                get {
                    return this.columnCreateImage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TestImageColumn {
                get {
                    return this.columnTestImage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TestStaticImageColumn {
                get {
                    return this.columnTestStaticImage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DestroyImageColumn {
                get {
                    return this.columnDestroyImage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CreateExceptionColumn {
                get {
                    return this.columnCreateException;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TestExceptionColumn {
                get {
                    return this.columnTestException;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TestStaticExceptionColumn {
                get {
                    return this.columnTestStaticException;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DestroyExceptionColumn {
                get {
                    return this.columnDestroyException;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DependenciesColumn {
                get {
                    return this.columnDependencies;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EnableTestColumn {
                get {
                    return this.columnEnableTest;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TargetTypeColumn {
                get {
                    return this.columnTargetType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CanCreateColumn {
                get {
                    return this.columnCanCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CanTestColumn {
                get {
                    return this.columnCanTest;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CanTestStaticColumn {
                get {
                    return this.columnCanTestStatic;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CanDestroyColumn {
                get {
                    return this.columnCanDestroy;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ActiveInstanceColumn {
                get {
                    return this.columnActiveInstance;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CreateMethodColumn {
                get {
                    return this.columnCreateMethod;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TestMethodColumn {
                get {
                    return this.columnTestMethod;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TestStaticMethodColumn {
                get {
                    return this.columnTestStaticMethod;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DestroyMethodColumn {
                get {
                    return this.columnDestroyMethod;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionsRow this[int index] {
                get {
                    return ((ActionsRow)(this.Rows[index]));
                }
            }
            
            public event ActionsRowChangeEventHandler ActionsRowChanging;
            
            public event ActionsRowChangeEventHandler ActionsRowChanged;
            
            public event ActionsRowChangeEventHandler ActionsRowDeleting;
            
            public event ActionsRowChangeEventHandler ActionsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddActionsRow(ActionsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionsRow AddActionsRow(
                        string Name, 
                        string FullName, 
                        System.Drawing.Bitmap CreateImage, 
                        System.Drawing.Bitmap TestImage, 
                        System.Drawing.Bitmap TestStaticImage, 
                        System.Drawing.Bitmap DestroyImage, 
                        System.Exception CreateException, 
                        System.Exception TestException, 
                        System.Exception TestStaticException, 
                        System.Exception DestroyException, 
                        int Dependencies, 
                        bool EnableTest, 
                        System.Type TargetType, 
                        bool CanCreate, 
                        bool CanTest, 
                        bool CanTestStatic, 
                        bool CanDestroy, 
                        object ActiveInstance, 
                        System.Reflection.MethodInfo CreateMethod, 
                        System.Reflection.MethodInfo TestMethod, 
                        System.Reflection.MethodInfo TestStaticMethod, 
                        System.Reflection.MethodInfo DestroyMethod) {
                ActionsRow rowActionsRow = ((ActionsRow)(this.NewRow()));
                rowActionsRow.ItemArray = new object[] {
                        Name,
                        FullName,
                        CreateImage,
                        TestImage,
                        TestStaticImage,
                        DestroyImage,
                        CreateException,
                        TestException,
                        TestStaticException,
                        DestroyException,
                        Dependencies,
                        EnableTest,
                        TargetType,
                        CanCreate,
                        CanTest,
                        CanTestStatic,
                        CanDestroy,
                        ActiveInstance,
                        CreateMethod,
                        TestMethod,
                        TestStaticMethod,
                        DestroyMethod,
                        null};
                this.Rows.Add(rowActionsRow);
                return rowActionsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionsRow FindByID(int ID) {
                return ((ActionsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ActionsDataTable cln = ((ActionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ActionsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnFullName = base.Columns["FullName"];
                this.columnCreateImage = base.Columns["CreateImage"];
                this.columnTestImage = base.Columns["TestImage"];
                this.columnTestStaticImage = base.Columns["TestStaticImage"];
                this.columnDestroyImage = base.Columns["DestroyImage"];
                this.columnCreateException = base.Columns["CreateException"];
                this.columnTestException = base.Columns["TestException"];
                this.columnTestStaticException = base.Columns["TestStaticException"];
                this.columnDestroyException = base.Columns["DestroyException"];
                this.columnDependencies = base.Columns["Dependencies"];
                this.columnEnableTest = base.Columns["EnableTest"];
                this.columnTargetType = base.Columns["TargetType"];
                this.columnCanCreate = base.Columns["CanCreate"];
                this.columnCanTest = base.Columns["CanTest"];
                this.columnCanTestStatic = base.Columns["CanTestStatic"];
                this.columnCanDestroy = base.Columns["CanDestroy"];
                this.columnActiveInstance = base.Columns["ActiveInstance"];
                this.columnCreateMethod = base.Columns["CreateMethod"];
                this.columnTestMethod = base.Columns["TestMethod"];
                this.columnTestStaticMethod = base.Columns["TestStaticMethod"];
                this.columnDestroyMethod = base.Columns["DestroyMethod"];
                this.columnID = base.Columns["ID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnFullName = new System.Data.DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.columnCreateImage = new System.Data.DataColumn("CreateImage", typeof(System.Drawing.Bitmap), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateImage);
                this.columnTestImage = new System.Data.DataColumn("TestImage", typeof(System.Drawing.Bitmap), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestImage);
                this.columnTestStaticImage = new System.Data.DataColumn("TestStaticImage", typeof(System.Drawing.Bitmap), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestStaticImage);
                this.columnDestroyImage = new System.Data.DataColumn("DestroyImage", typeof(System.Drawing.Bitmap), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestroyImage);
                this.columnCreateException = new System.Data.DataColumn("CreateException", typeof(System.Exception), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateException);
                this.columnTestException = new System.Data.DataColumn("TestException", typeof(System.Exception), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestException);
                this.columnTestStaticException = new System.Data.DataColumn("TestStaticException", typeof(System.Exception), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestStaticException);
                this.columnDestroyException = new System.Data.DataColumn("DestroyException", typeof(System.Exception), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestroyException);
                this.columnDependencies = new System.Data.DataColumn("Dependencies", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDependencies);
                this.columnEnableTest = new System.Data.DataColumn("EnableTest", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnableTest);
                this.columnTargetType = new System.Data.DataColumn("TargetType", typeof(System.Type), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTargetType);
                this.columnCanCreate = new System.Data.DataColumn("CanCreate", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCanCreate);
                this.columnCanTest = new System.Data.DataColumn("CanTest", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCanTest);
                this.columnCanTestStatic = new System.Data.DataColumn("CanTestStatic", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCanTestStatic);
                this.columnCanDestroy = new System.Data.DataColumn("CanDestroy", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCanDestroy);
                this.columnActiveInstance = new System.Data.DataColumn("ActiveInstance", typeof(object), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnActiveInstance);
                this.columnCreateMethod = new System.Data.DataColumn("CreateMethod", typeof(System.Reflection.MethodInfo), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateMethod);
                this.columnTestMethod = new System.Data.DataColumn("TestMethod", typeof(System.Reflection.MethodInfo), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestMethod);
                this.columnTestStaticMethod = new System.Data.DataColumn("TestStaticMethod", typeof(System.Reflection.MethodInfo), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestStaticMethod);
                this.columnDestroyMethod = new System.Data.DataColumn("DestroyMethod", typeof(System.Reflection.MethodInfo), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestroyMethod);
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.Constraints.Add(new System.Data.UniqueConstraint("ActionsPK", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionsRow NewActionsRow() {
                return ((ActionsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ActionsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ActionsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ActionsRowChanged != null)) {
                    this.ActionsRowChanged(this, new ActionsRowChangeEvent(((ActionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ActionsRowChanging != null)) {
                    this.ActionsRowChanging(this, new ActionsRowChangeEvent(((ActionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ActionsRowDeleted != null)) {
                    this.ActionsRowDeleted(this, new ActionsRowChangeEvent(((ActionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ActionsRowDeleting != null)) {
                    this.ActionsRowDeleting(this, new ActionsRowChangeEvent(((ActionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveActionsRow(ActionsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                UnitTestData ds = new UnitTestData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ActionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DependenciesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnParentID;
            
            private System.Data.DataColumn columnChildID;
            
            private System.Data.DataColumn columnSortIndex;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DependenciesDataTable() {
                this.TableName = "Dependencies";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DependenciesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DependenciesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ParentIDColumn {
                get {
                    return this.columnParentID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ChildIDColumn {
                get {
                    return this.columnChildID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SortIndexColumn {
                get {
                    return this.columnSortIndex;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DependenciesRow this[int index] {
                get {
                    return ((DependenciesRow)(this.Rows[index]));
                }
            }
            
            public event DependenciesRowChangeEventHandler DependenciesRowChanging;
            
            public event DependenciesRowChangeEventHandler DependenciesRowChanged;
            
            public event DependenciesRowChangeEventHandler DependenciesRowDeleting;
            
            public event DependenciesRowChangeEventHandler DependenciesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDependenciesRow(DependenciesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DependenciesRow AddDependenciesRow(ActionsRow parentActionsRowByChildIDFK, ActionsRow parentActionsRowByParentIDFK, int SortIndex) {
                DependenciesRow rowDependenciesRow = ((DependenciesRow)(this.NewRow()));
                rowDependenciesRow.ItemArray = new object[] {
                        parentActionsRowByChildIDFK[22],
                        parentActionsRowByParentIDFK[22],
                        SortIndex};
                this.Rows.Add(rowDependenciesRow);
                return rowDependenciesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DependenciesRow FindByParentIDChildID(int ParentID, int ChildID) {
                return ((DependenciesRow)(this.Rows.Find(new object[] {
                            ParentID,
                            ChildID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DependenciesDataTable cln = ((DependenciesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DependenciesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParentID = base.Columns["ParentID"];
                this.columnChildID = base.Columns["ChildID"];
                this.columnSortIndex = base.Columns["SortIndex"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParentID = new System.Data.DataColumn("ParentID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentID);
                this.columnChildID = new System.Data.DataColumn("ChildID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnChildID);
                this.columnSortIndex = new System.Data.DataColumn("SortIndex", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortIndex);
                this.Constraints.Add(new System.Data.UniqueConstraint("DependenciesPK", new System.Data.DataColumn[] {
                                this.columnParentID,
                                this.columnChildID}, true));
                this.columnParentID.AllowDBNull = false;
                this.columnChildID.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DependenciesRow NewDependenciesRow() {
                return ((DependenciesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DependenciesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DependenciesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DependenciesRowChanged != null)) {
                    this.DependenciesRowChanged(this, new DependenciesRowChangeEvent(((DependenciesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DependenciesRowChanging != null)) {
                    this.DependenciesRowChanging(this, new DependenciesRowChangeEvent(((DependenciesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DependenciesRowDeleted != null)) {
                    this.DependenciesRowDeleted(this, new DependenciesRowChangeEvent(((DependenciesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DependenciesRowDeleting != null)) {
                    this.DependenciesRowDeleting(this, new DependenciesRowChangeEvent(((DependenciesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDependenciesRow(DependenciesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                UnitTestData ds = new UnitTestData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DependenciesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ActionsRow : System.Data.DataRow {
            
            private ActionsDataTable tableActions;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActionsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableActions = ((ActionsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableActions.NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableActions.FullNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullName\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.FullNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Bitmap CreateImage {
                get {
                    try {
                        return ((System.Drawing.Bitmap)(this[this.tableActions.CreateImageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CreateImage\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.CreateImageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Bitmap TestImage {
                get {
                    try {
                        return ((System.Drawing.Bitmap)(this[this.tableActions.TestImageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TestImage\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.TestImageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Bitmap TestStaticImage {
                get {
                    try {
                        return ((System.Drawing.Bitmap)(this[this.tableActions.TestStaticImageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TestStaticImage\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.TestStaticImageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Bitmap DestroyImage {
                get {
                    try {
                        return ((System.Drawing.Bitmap)(this[this.tableActions.DestroyImageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DestroyImage\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.DestroyImageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Exception CreateException {
                get {
                    try {
                        return ((System.Exception)(this[this.tableActions.CreateExceptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CreateException\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.CreateExceptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Exception TestException {
                get {
                    try {
                        return ((System.Exception)(this[this.tableActions.TestExceptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TestException\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.TestExceptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Exception TestStaticException {
                get {
                    try {
                        return ((System.Exception)(this[this.tableActions.TestStaticExceptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TestStaticException\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.TestStaticExceptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Exception DestroyException {
                get {
                    try {
                        return ((System.Exception)(this[this.tableActions.DestroyExceptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DestroyException\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.DestroyExceptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Dependencies {
                get {
                    try {
                        return ((int)(this[this.tableActions.DependenciesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Dependencies\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.DependenciesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool EnableTest {
                get {
                    try {
                        return ((bool)(this[this.tableActions.EnableTestColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EnableTest\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.EnableTestColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Type TargetType {
                get {
                    try {
                        return ((System.Type)(this[this.tableActions.TargetTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TargetType\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.TargetTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CanCreate {
                get {
                    try {
                        return ((bool)(this[this.tableActions.CanCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CanCreate\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.CanCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CanTest {
                get {
                    try {
                        return ((bool)(this[this.tableActions.CanTestColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CanTest\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.CanTestColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CanTestStatic {
                get {
                    try {
                        return ((bool)(this[this.tableActions.CanTestStaticColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CanTestStatic\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.CanTestStaticColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CanDestroy {
                get {
                    try {
                        return ((bool)(this[this.tableActions.CanDestroyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CanDestroy\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.CanDestroyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public object ActiveInstance {
                get {
                    try {
                        return ((object)(this[this.tableActions.ActiveInstanceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ActiveInstance\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.ActiveInstanceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Reflection.MethodInfo CreateMethod {
                get {
                    try {
                        return ((System.Reflection.MethodInfo)(this[this.tableActions.CreateMethodColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CreateMethod\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.CreateMethodColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Reflection.MethodInfo TestMethod {
                get {
                    try {
                        return ((System.Reflection.MethodInfo)(this[this.tableActions.TestMethodColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TestMethod\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.TestMethodColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Reflection.MethodInfo TestStaticMethod {
                get {
                    try {
                        return ((System.Reflection.MethodInfo)(this[this.tableActions.TestStaticMethodColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TestStaticMethod\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.TestStaticMethodColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Reflection.MethodInfo DestroyMethod {
                get {
                    try {
                        return ((System.Reflection.MethodInfo)(this[this.tableActions.DestroyMethodColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DestroyMethod\' in table \'Actions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActions.DestroyMethodColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableActions.IDColumn]));
                }
                set {
                    this[this.tableActions.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableActions.NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableActions.NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullNameNull() {
                return this.IsNull(this.tableActions.FullNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullNameNull() {
                this[this.tableActions.FullNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreateImageNull() {
                return this.IsNull(this.tableActions.CreateImageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreateImageNull() {
                this[this.tableActions.CreateImageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestImageNull() {
                return this.IsNull(this.tableActions.TestImageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestImageNull() {
                this[this.tableActions.TestImageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestStaticImageNull() {
                return this.IsNull(this.tableActions.TestStaticImageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestStaticImageNull() {
                this[this.tableActions.TestStaticImageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestroyImageNull() {
                return this.IsNull(this.tableActions.DestroyImageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestroyImageNull() {
                this[this.tableActions.DestroyImageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreateExceptionNull() {
                return this.IsNull(this.tableActions.CreateExceptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreateExceptionNull() {
                this[this.tableActions.CreateExceptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestExceptionNull() {
                return this.IsNull(this.tableActions.TestExceptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestExceptionNull() {
                this[this.tableActions.TestExceptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestStaticExceptionNull() {
                return this.IsNull(this.tableActions.TestStaticExceptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestStaticExceptionNull() {
                this[this.tableActions.TestStaticExceptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestroyExceptionNull() {
                return this.IsNull(this.tableActions.DestroyExceptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestroyExceptionNull() {
                this[this.tableActions.DestroyExceptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDependenciesNull() {
                return this.IsNull(this.tableActions.DependenciesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDependenciesNull() {
                this[this.tableActions.DependenciesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnableTestNull() {
                return this.IsNull(this.tableActions.EnableTestColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnableTestNull() {
                this[this.tableActions.EnableTestColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTargetTypeNull() {
                return this.IsNull(this.tableActions.TargetTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTargetTypeNull() {
                this[this.tableActions.TargetTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCanCreateNull() {
                return this.IsNull(this.tableActions.CanCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCanCreateNull() {
                this[this.tableActions.CanCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCanTestNull() {
                return this.IsNull(this.tableActions.CanTestColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCanTestNull() {
                this[this.tableActions.CanTestColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCanTestStaticNull() {
                return this.IsNull(this.tableActions.CanTestStaticColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCanTestStaticNull() {
                this[this.tableActions.CanTestStaticColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCanDestroyNull() {
                return this.IsNull(this.tableActions.CanDestroyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCanDestroyNull() {
                this[this.tableActions.CanDestroyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActiveInstanceNull() {
                return this.IsNull(this.tableActions.ActiveInstanceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActiveInstanceNull() {
                this[this.tableActions.ActiveInstanceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreateMethodNull() {
                return this.IsNull(this.tableActions.CreateMethodColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreateMethodNull() {
                this[this.tableActions.CreateMethodColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestMethodNull() {
                return this.IsNull(this.tableActions.TestMethodColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestMethodNull() {
                this[this.tableActions.TestMethodColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestStaticMethodNull() {
                return this.IsNull(this.tableActions.TestStaticMethodColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestStaticMethodNull() {
                this[this.tableActions.TestStaticMethodColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestroyMethodNull() {
                return this.IsNull(this.tableActions.DestroyMethodColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestroyMethodNull() {
                this[this.tableActions.DestroyMethodColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DependenciesRow[] GetDependenciesRowsByChildIDFK() {
                return ((DependenciesRow[])(base.GetChildRows(this.Table.ChildRelations["ChildIDFK"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DependenciesRow[] GetDependenciesRowsByParentIDFK() {
                return ((DependenciesRow[])(base.GetChildRows(this.Table.ChildRelations["ParentIDFK"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DependenciesRow : System.Data.DataRow {
            
            private DependenciesDataTable tableDependencies;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DependenciesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDependencies = ((DependenciesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParentID {
                get {
                    return ((int)(this[this.tableDependencies.ParentIDColumn]));
                }
                set {
                    this[this.tableDependencies.ParentIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ChildID {
                get {
                    return ((int)(this[this.tableDependencies.ChildIDColumn]));
                }
                set {
                    this[this.tableDependencies.ChildIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SortIndex {
                get {
                    try {
                        return ((int)(this[this.tableDependencies.SortIndexColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SortIndex\' in table \'Dependencies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDependencies.SortIndexColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionsRow ActionsRowByChildIDFK {
                get {
                    return ((ActionsRow)(this.GetParentRow(this.Table.ParentRelations["ChildIDFK"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ChildIDFK"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionsRow ActionsRowByParentIDFK {
                get {
                    return ((ActionsRow)(this.GetParentRow(this.Table.ParentRelations["ParentIDFK"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ParentIDFK"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortIndexNull() {
                return this.IsNull(this.tableDependencies.SortIndexColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortIndexNull() {
                this[this.tableDependencies.SortIndexColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ActionsRowChangeEvent : System.EventArgs {
            
            private ActionsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionsRowChangeEvent(ActionsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DependenciesRowChangeEvent : System.EventArgs {
            
            private DependenciesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DependenciesRowChangeEvent(DependenciesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DependenciesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591